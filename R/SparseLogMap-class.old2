
#' @importClassesFrom Matrix ngCMatrix
#' @exportClass SparseLogMap
setClass(Class = 'SparseLogMap', slots = c(data = 'ngCMatrix'))

#' @exportClass InvertedSparseLogMap
setClass(Class = 'InvertedSparseLogMap', contains = 'SparseLogMap')

#' @importFrom methods setValidity
setValidity(
  Class = 'SparseLogMap',
  method = function(object) {
    if (all(dim(object) == 0)) {
      return(TRUE)
    }
    valid <- NULL
    if (nrow(object) > 0) {
      # Check rownames
      if (length(rownames(object)) == 0) {
        valid <- c(valid, "Row names must be supplied")
      }
      if (any(nzchar(rownames(object)) == 0)) {
        valid <- c(valid, "Row names cannot be empty strings")
      }
      if (anyDuplicated(rownames(object))) {
        valid <- c(valid, "Duplicate row names not allowed")
      }
    }
    if (length(colnames(object)) > 0) {
      if (any(nzchar(colnames(object)) == 0)) {
        valid <- c(valid, "column names cannot be empty strings")
      }
      if (anyDuplicated(colnames(object))) {
        valid <- c(valid, "Duplicate column names not allowed")
      }
    }
    return(valid %||% TRUE)
  }
)

#' @importFrom Matrix Matrix
#' @importClassesFrom Matrix ngCMatrix
#' @export
SparseLogMap <- function(x, ncol = 0, invert = FALSE) {
  if (length(x) == 0) {
    if (invert) {
      return(new("InvertedSparseLogMap"))
    }
    return(new("SparseLogMap"))
  }
  if (!is.character(x)) {
    x <- as.character(x)
  }
  out <- Matrix(nrow = length(x), ncol = ncol, sparse = TRUE) %>%
    as("ngCMatrix")
  rownames(out) <- x
  gc(verbose = FALSE)
  if (invert) {
    return(new("InvertedSparseLogMap", data = out))
  }
  new("SparseLogMap", data = out)
}


#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Helper functions #############################################################
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# S3 methods ###################################################################
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#' @export
#' @method as.matrix SparseLogMap
as.matrix.SparseLogMap <- function(x, ...) {
  if (.inverted(x)) {
    return(as.matrix(!x@data))
  }
  as.matrix(x@data)
}

#' @importFrom Matrix rowSums colSums
dropEmpty.SparseLogMap <- function(x, drop.columns = FALSE, ...) {
  row.sum <- rowSums(x)
  fidx <- which(row.sum == 0)
  if (length(fidx) == 0) {
    return(x)
  }
  x <- x[-fidx, , drop = FALSE]
  if (!drop.columns) {
    return(x)
  }
  col.sum <- colSums(x)
  fidx <- which(col.sum == 0)
  if (length(fidx) == 0) {
    return(x)
  }
  x[, -fidx, drop = FALSE]
}

#' @export
#' @method intersectedEntries SparseLogMap
intersectedEntries.SparseLogMap <- function(x, ...) {
  row.sums <- rowSums(x)
  return(rownames(x)[row.sums > 1])
}

#' @export
#' @method invertMap SparseLogMap
invertMap.SparseLogMap <- function(x, ...) {
  new("InvertedSparseLogMap", data = x@data)
}

#' @export
#' @method invertMap InvertedSparseLogMap
invertMap.InvertedSparseLogMap <- function(x, ...) {
  new("SparseLogMap", data = x@data)
}

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# S4 methods ###################################################################
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

setAs(
  from = "SparseLogMap",
  to = "InvertedSparseLogMap",
  def = function(from) {
    new("InvertedSparseLogMap", data = as(!from@data, "ngCMatrix"))
  }
)

setAs(
  from = "InvertedSparseLogMap",
  to = "SparseLogMap",
  def = function(from) {
    new("SparseLogMap", data = as(!from@data, "ngCMatrix"))
  }
)

#' @export
setMethod(
  f = "!",
  signature = "SparseLogMap",
  definition = function(x) invertMap.SparseLogMap(x)
)

#' @export
setMethod(
  f = "!",
  signature = "InvertedSparseLogMap",
  definition = function(x) invertMap.InvertedSparseLogMap(x)
)

#' @export
setMethod(
  f = '[[',
  signature = c(x = 'SparseLogMap', i = 'character', j = 'missing'),
  definition = function(x, i, ...) {
    .check_colnames_SparseLogMap(x)
    i <- i[1]
    i <- match.arg(i, choices = colnames(x))
    .get_rownames_SparseLogMap(x, i)
  }
)

#' @export
setMethod(
  f = '[[',
  signature = c(x = 'SparseLogMap', i = 'integer', j = 'missing'),
  definition = function(x, i, ...) {
    i <- i[1]
    .get_rownames_SparseLogMap(x, i)
  }
)

#' @export
setMethod(
  f = '[[',
  signature = c(x = 'SparseLogMap', i = 'numeric', j = 'missing'),
  definition = function(x, i, ...) {
    i <- i[1]
    return(x[[as.integer(i)]])
  }
)




