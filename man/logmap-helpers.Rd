% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/logical_map-nsparseMatrix.R
\name{logmap-helpers}
\alias{logmap-helpers}
\alias{dropEmpty}
\alias{whichIntersect}
\alias{getMappedEntries}
\alias{setMappedEntries}
\alias{dropEmpty.nsparseMatrix}
\alias{whichIntersect.nsparseMatrix}
\alias{getMappedEntries.nsparseMatrix}
\alias{setMappedEntries.nsparseMatrix}
\title{Helper functions for sparse logical map.}
\usage{
dropEmpty(x, ...)

whichIntersect(x, ...)

getMappedEntries(x, i, ...)

setMappedEntries(x, i, value, ...)

\method{dropEmpty}{nsparseMatrix}(x, drop.columns = FALSE, ...)

\method{whichIntersect}{nsparseMatrix}(x, ...)

\method{getMappedEntries}{nsparseMatrix}(x, i, ...)

\method{setMappedEntries}{nsparseMatrix}(x, i, value, ...)
}
\arguments{
\item{x}{A sparse logical map. Typically an \code{\link[Matrix:nsparseMatrix-class]{nsparseMatrix}}.}

\item{...}{Arguments passed to other metheds.}

\item{i}{Get or set \code{value} to which observation. Must be either an integer
or a character (observation name).}

\item{value}{Values to record in the map for \code{i}. Must be one of
the followings:
\itemize{
\item A character vector: Set these entries to \code{TRUE} for \code{i}.
\item \code{NULL}: Set all values to \code{FALSE} for \code{i}.
}}

\item{drop.columns}{Whether or not to also drop the empty observations.}
}
\value{
\itemize{
\item \code{dropEmpty}: An updated sparse logical map with empty entries (and
observations) dropped.
}

\itemize{
\item \code{whichIntersect}: An integer vector specifying which values exist in
more than one observations.
}

\itemize{
\item \code{getMappedEntries}: A character vector specifying values that exist in
observation \code{i}.
}

\itemize{
\item \code{setMappedEntries}: An updated sparse logical map with mappings for
observation \code{i} modified.
}
}
\description{
Manipulation functions for sparse logical map, including getting or setting
elements, selecting intersected values and drop empty mappings.
}
\examples{
# Create a logical map for known observations
obs <- letters[1:4]
map <- sparseLogMap(LETTERS, ncol = length(obs), names = obs)
map

# Set entries to a new column
map <- setMappedEntries(map, "e", sample(LETTERS, 10))
map

# Set 'c' to NULL
map <- setMappedEntries(map, "c", sample(LETTERS, 10))
map

map <- setMappedEntries(map, "c", NULL)
map

# Set entries to an existing column
map <- setMappedEntries(map, "a", sample(LETTERS, 10))
map

# Get entries that exist in one observation
getMappedEntries(map, 1)
getMappedEntries(map, "b")

# Which entries are intesected along all observation
whichIntersect(map)

# Drop entries that doesn't exist in any observation
dropEmpty(map)

# Also drop empty observations
dropEmpty(map, drop.columns = TRUE)

}
